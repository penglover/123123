<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wellcome to IT Blog</title>
  <subtitle>Penglover&#39;s Software house</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://penglover.github.io/"/>
  <updated>2017-01-15T01:41:57.000Z</updated>
  <id>https://penglover.github.io/</id>
  
  <author>
    <name>Myeongsoo Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tensorflow에서 언제 LinearRegression을 적용시킬지 알아보는 법</title>
    <link href="https://penglover.github.io/2017/01/15/tensorflow-graph/"/>
    <id>https://penglover.github.io/2017/01/15/tensorflow-graph/</id>
    <published>2017-01-15T01:22:39.000Z</published>
    <updated>2017-01-15T01:41:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LinearRegression은-언제-적용시킬까요"><a href="#LinearRegression은-언제-적용시킬까요" class="headerlink" title="LinearRegression은 언제 적용시킬까요?"></a>LinearRegression은 언제 적용시킬까요?</h1><p>이것을 알기 위해서는 그래프를 그려 보는 것이 좋습니다.<br>파이썬에서는 그래프를 쉽게 그리게 해주는 라이브러리가 존재하는데요~<br>바로 matplotlib를 이용하면 아주 쉽습니다.<br>pip이 설치되어 있다면 그냥 pip install matplotlib 하시면 됩니다.<br>python3버전이신 경우에는 pip3 install matplotlib를 하시구요.<br><a href="http://matplotlib.org/users/installing.html" rel="external nofollow noopener noreferrer" target="_blank">http://matplotlib.org/users/installing.html</a> 에서 다른 설치법들도 알려줍니다~<br>설치 안되시면 댓글남겨주세요.</p>
<p>그럼 코드를 보면서 설명드리도록 하겠습니다.<br><figure class="highlight plain"><figcaption><span>matplotlib.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">X = [1., 2., 3.]</div><div class="line">Y = [1., 2., 3.]</div><div class="line">m = samples = len(X)</div><div class="line"></div><div class="line">W = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">hypothesis = tf.mul(X, W)</div><div class="line"></div><div class="line">cost = tf.reduce_sum(tf.pow(hypothesis-Y,2))/m</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"></div><div class="line">W_val = []</div><div class="line">cost_val = []</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line">sess.run(init)</div><div class="line">for i in range(-30,50):</div><div class="line">    print (i*0.1, sess.run(cost, feed_dict=&#123;W: i*0.1&#125;))</div><div class="line">    W_val.append(i*0.1)</div><div class="line">    cost_val.append(sess.run(cost, feed_dict=&#123;W: i*0.1&#125;))</div><div class="line"></div><div class="line">plt.plot(W_val, cost_val, &apos;ro&apos;)</div><div class="line">plt.ylabel(&apos;cost&apos;)</div><div class="line">plt.xlabel(&apos;W&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><br>결과값은 그래프가 포함되다보니 스크린샷으로 보여드리겠습니다.<br><img src="https://penglover.github.io/css/images/matplotlib_sample.png" alt="matplotlib_sample"></p>
<p>자 그럼 본격적인 이야기를 해보겠습니다.<br>코드는 참 평범합니다. 그냥 hypothesis-Y에 제곱을 한 값을 평균을 내어 준 것인데요.<br>우리는 이미 X와 Y의 관계가 X * 1 = Y라는 것을 알고 있습니다.<br>X = [1, 2, 3]이고 Y = [1, 2, 3]이니 당연한 일이지요.<br>컴퓨터를 통해서 그래프를 그려보도록 하겠습니다.<br>사용법은 코드를 조금만 보시면 이해가 쉽게 가실겁니다.</p>
<p>그림처럼 저렇게 순탄한 아래쪽이 둥근모형이면 손쉽게 LinearRegression을 적용할 수 있습니다.<br>기울기 값이 줄어들거나 늘어나는 패턴이 일정하기 때문이지요.<br>수식으로 순간미분값(해당 점의 기울기값)이 0에 가까워 지도록 찾아주기만 하면 되닌까요.</p>
<p>아주 간단하죠?<br>요약하자면 연속하고 아래쪽 둥근부분이 저렇게 그림처럼 한부분만 있으면 됩니다.<br>3차원의 경우에도 마찬가지에요!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LinearRegression은-언제-적용시킬까요&quot;&gt;&lt;a href=&quot;#LinearRegression은-언제-적용시킬까요&quot; class=&quot;headerlink&quot; title=&quot;LinearRegression은 언제 적용시킬까요?&quot;&gt;&lt;/a&gt;Line
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>텐서플로우로 linear regression 구현 및 설명</title>
    <link href="https://penglover.github.io/2017/01/14/tf-LinearRegression/"/>
    <id>https://penglover.github.io/2017/01/14/tf-LinearRegression/</id>
    <published>2017-01-14T14:50:53.000Z</published>
    <updated>2017-01-15T00:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><p>Linear Regression에 대한 지식이 없으시다면 아래의 동영상을 보시는 것을 추천합니다.<br><a href="https://www.youtube.com/watch?v=GmtqOlPYB84" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=GmtqOlPYB84</a><br>이미 알고 계신다면 렛츠고!<br>아! 참고로 tensorflow 버전이나 python버전이 다르다면<br>tf.global_variables_initializer, print, range 부분에 수정이 필요합니다.<br>오류나면 댓글남겨주세요 ㅎㅎ 바로 알려드릴게요.</p>
<figure class="highlight plain"><figcaption><span>LinearRegression.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">x_data = [1, 2, 3, 4]</div><div class="line">y_data = [2, 4, 6, 8]</div><div class="line"></div><div class="line">W = tf.Variable(tf.random_uniform([1], -10000, 10000))</div><div class="line">b = tf.Variable(tf.random_uniform([1], -10000, 10000))</div><div class="line"></div><div class="line">X = tf.placeholder(tf.float32)</div><div class="line">Y = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">hypothesis = W * X + b</div><div class="line"></div><div class="line">cost = tf.reduce_mean(tf.square(hypothesis - Y))</div><div class="line"></div><div class="line">a = tf.Variable(0.1)</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(a)</div><div class="line">train = optimizer.minimize(cost)</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line">sess.run(init)</div><div class="line"></div><div class="line">for step in range(2001):</div><div class="line">    sess.run(train, feed_dict=&#123;X: x_data, Y: y_data&#125;)</div><div class="line">    if step % 200 == 0:</div><div class="line">        print (step, sess.run(cost, feed_dict=&#123;X: x_data, Y: y_data&#125;), sess.run(W), sess.run(b))</div><div class="line"></div><div class="line">print (sess.run(hypothesis, feed_dict=&#123;X: [5, 10]&#125;))</div><div class="line">print (sess.run(hypothesis, feed_dict=&#123;X: [2.5, 1.5]&#125;))</div></pre></td></tr></table></figure>
<p><strong>결과값</strong><br>0 1.17541e+07 [-3064.45288086] [ 7678.85205078]<br>200 53.5173 [-4.08845949] [ 17.90081406]<br>400 0.000280612 [ 1.98605835] [ 0.04099015]<br>600 1.46635e-09 [ 1.99996805] [  9.38054509e-05]<br>800 1.42109e-14 [ 1.99999988] [  4.28800519e-07]<br>1000 0.0 [ 2.] [  1.18856534e-07]<br>1200 0.0 [ 2.] [  1.18856534e-07]<br>1400 0.0 [ 2.] [  1.18856534e-07]<br>1600 0.0 [ 2.] [  1.18856534e-07]<br>1800 0.0 [ 2.] [  1.18856534e-07]<br>2000 0.0 [ 2.] [  1.18856534e-07]<br>[ 10.  20.]<br>[ 5.  3.]</p>
<p>아주 쉽게 이해가 가실 것입니다.<br>W와 b를 -10000에서 10000사이의 랜덤한 값으로 두었습니다.<br>X와 Y는 32bit의 float형 데이터로 선언해 두었지요.<br>hypothesis는 input값이 될 X에게 w와 b를 더해서 나오는 결과에 대한 기대값입니다.<br>cost는 기대값과 실제값을 뺀것을 제곱을 한 것의 평균값을 갖게 될 것입니다.<br>reduce_mean은 참고로 평균값을 내게 해주는 매소드입니다.<br>(m개의 input이 있으면 그것들의 평균값을 매겨줌)<br>a는 learning rate입니다.<br>tf.train.GradientDescentOptimizer가 gradient descent 알고리즘을 처리해줍니다.<br>그리고 minimize가 cost를 인자로 받아서 train될때마다 W와 b를 업데이트합니다.<br>화면이 너무 꽉 찰 것 같아서 step은 200개당 1번 print 했습니다.<br>결과값을 보니 training이 아주 잘 되었네요!</p>
<p>헷갈리는 tensorflow의 링크가 있다면 아래에 모든 것이 나와있습니다.<br><a href="https://www.tensorflow.org/versions/master/api_docs/python/math_ops/reduction#reduce_mean" rel="external nofollow noopener noreferrer" target="_blank">https://www.tensorflow.org/versions/master/api_docs/python/math_ops/reduction#reduce_mean</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linear-Regression&quot;&gt;&lt;a href=&quot;#Linear-Regression&quot; class=&quot;headerlink&quot; title=&quot;Linear Regression&quot;&gt;&lt;/a&gt;Linear Regression&lt;/h1&gt;&lt;p&gt;Linear Reg
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>텐서플로우에서 placeholder란 무엇일까?</title>
    <link href="https://penglover.github.io/2017/01/14/tf-placeholder/"/>
    <id>https://penglover.github.io/2017/01/14/tf-placeholder/</id>
    <published>2017-01-14T13:01:16.000Z</published>
    <updated>2017-01-15T00:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>텐서플로우에서 참 재밌는 메서드가 있습니다.<br>바로 placeholder 인데요!<br>우리는 이것을 통해 값의 대입을 미룰 수 있습니다.<br>아래의 코드에서 자세히 확인해보겠습니다.<br>아! 참고로 python버전이 다르다면<br>print부분에 수정이 필요합니다.</p>
<figure class="highlight plain"><figcaption><span>placeholder.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line"></div><div class="line">a = tf.placeholder(tf.int16)</div><div class="line">b = tf.placeholder(tf.int16)</div><div class="line"></div><div class="line">add = tf.add(a, b)</div><div class="line">mul = tf.mul(a, b)</div><div class="line"></div><div class="line"></div><div class="line">print(&quot;더한 결과는 %i&quot; % sess.run(add,feed_dict=&#123;a: 2, b: 3&#125;))</div><div class="line">print(&quot;곱한 결과는 %i&quot; % sess.run(mul,feed_dict=&#123;a: 3, b: 4&#125;))</div></pre></td></tr></table></figure>
<p><strong>결과값</strong><br>더한 결과는 5<br>곱한 결과는 12</p>
<p>placeholder를 통해 먼저 16bit 크기의 int형 데이터의 공간을 만들어 놓았습니다.<br>그리고 나중에 연산을 할 때에 대입값을 지정해 주었지요.<br>나중에 아주 유용하게 많이 쓰이니 꼭 잘 숙지하고 넘어가야 하는 부분입니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;텐서플로우에서 참 재밌는 메서드가 있습니다.&lt;br&gt;바로 placeholder 인데요!&lt;br&gt;우리는 이것을 통해 값의 대입을 미룰 수 있습니다.&lt;br&gt;아래의 코드에서 자세히 확인해보겠습니다.&lt;br&gt;아! 참고로 python버전이 다르다면&lt;br&gt;pri
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>텐서플로우에서 상수란 존재하지 않는다? 모든것은 연산!</title>
    <link href="https://penglover.github.io/2017/01/14/tensorflow1/"/>
    <id>https://penglover.github.io/2017/01/14/tensorflow1/</id>
    <published>2017-01-14T12:33:46.000Z</published>
    <updated>2017-01-15T00:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="텐서플로우에서-상수란-존재하지-않는다"><a href="#텐서플로우에서-상수란-존재하지-않는다" class="headerlink" title="텐서플로우에서 상수란 존재하지 않는다"></a>텐서플로우에서 상수란 존재하지 않는다</h1><figure class="highlight plain"><figcaption><span>NoConstant.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">sess = tf.Session()</div><div class="line"></div><div class="line">a = tf.constant(1)</div><div class="line">b = tf.constant(2)</div><div class="line"></div><div class="line">c = a+b</div><div class="line"></div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line">print(c)</div><div class="line"></div><div class="line">print(sess.run(a))</div><div class="line">print(sess.run(b))</div><div class="line">print(sess.run(c))</div></pre></td></tr></table></figure>
<p><strong>결과값</strong><br>Tensor(“Const:0”, shape=(), dtype=int32)<br>Tensor(“Const_1:0”, shape=(), dtype=int32)<br>Tensor(“add:0”, shape=(), dtype=int32)<br>1<br>2<br>3</p>
<p>위에 보이듯이 모든 텐서플로우에서의 변수는 상수상태로 존재하지 않습니다.<br><strong>operation 상태로 존재하고 session에 run메소드를 주는 순간 연산이 이루어지지요.</strong><br>이로서 우리는 각 노드들을 병렬적으로 다룰 수 있게 되지요.<br>한마디로 각 노드들은 tensor들(데이터 배열들)을 나르는 역할을 할 뿐이기 때문에 모든 node는 operation이라고 하는 것이지요.<br>아래의 애니메이션을 보면 더 정확히 아실 수 있으실거에요!<br><img src="https://camo.githubusercontent.com/4ee55154486232ec9edd8f1a3bad4c4a146f6cfe/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f74656e736f72735f666c6f77696e672e676966" alt="움직이는텐서플로우그래프"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;텐서플로우에서-상수란-존재하지-않는다&quot;&gt;&lt;a href=&quot;#텐서플로우에서-상수란-존재하지-않는다&quot; class=&quot;headerlink&quot; title=&quot;텐서플로우에서 상수란 존재하지 않는다&quot;&gt;&lt;/a&gt;텐서플로우에서 상수란 존재하지 않는다&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>텐서플로우란 무엇일까? 추천 설치방법</title>
    <link href="https://penglover.github.io/2017/01/14/What-is-tensorflow-How-to-install/"/>
    <id>https://penglover.github.io/2017/01/14/What-is-tensorflow-How-to-install/</id>
    <published>2017-01-14T10:21:32.000Z</published>
    <updated>2017-01-15T00:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="텐서플로우란-무엇일까"><a href="#텐서플로우란-무엇일까" class="headerlink" title="텐서플로우란 무엇일까"></a>텐서플로우란 무엇일까</h1><p>요새 굉장히 핫하죠! 머신러닝, 딥러닝!<br>(머신러닝과 딥러닝에 대한 설명은 다음에 포스팅을 따로 하겠습니다)<br><strong>텐서플로우는 구글에서 발표한 머신러닝 오픈소스 라이브러리로 내부는 C++로 되어있고 여러 언어의 API를 제공합니다.</strong><br><strong>가장 문서화가 잘 되어있고 인기있는 API는 파이썬입니다.</strong><br>때문에 주로 사람들이 파이썬으로 개발을 하는데요!<br>그렇다면 왜 텐서플로우가 핫할까요?<br>그것은 바로 텐서플로우를 이용하면 짧은 시간에 강력한 머신러닝, 딥러닝 코드를 짤 수 있기 때문입니다.<br>테스트할 때에 쓰기도 좋고 상용 시스템을 만들 때에도 좋은 라이브러리입니다.</p>
<h1 id="텐서플로우는-왜-빠를까"><a href="#텐서플로우는-왜-빠를까" class="headerlink" title="텐서플로우는 왜 빠를까"></a>텐서플로우는 왜 빠를까</h1><p>텐서플로우가 빠른데에는 이유가 있습니다.<br><img src="https://penglover.github.io/css/images/tensorflow_howtowork.png" alt="텐서플로우작동방식"><br>위의 그림에서 보시다시피 각각의 node들이 연산을 병렬적으로 처리합니다.<br>내부코드가 C++라서 빠른데다가 병렬성이 좋아서 여기저기 잘 붙습니다.<br>즉 굉장히 유연하게 cpu, gpu 등의 환경에서 빠르게 처리될 수 있습니다.</p>
<h1 id="텐서플로우-설치방법"><a href="#텐서플로우-설치방법" class="headerlink" title="텐서플로우 설치방법"></a>텐서플로우 설치방법</h1><blockquote><p>아래의 링크에 설치 방법이 자세히 나와있습니다. 가장 추천하는 방법은 Virtualenv 설치입니다. 이유는 가상환경을 이용함으로써 파이썬의 버전을 독립적으로 지켜주기 때문입니다.</p>
<footer><strong>@텐서플로우설치</strong><cite><a href="https://tensorflowkorea.gitbooks.io/tensorflow-kr/content/g3doc/get_started/os_setup.html" rel="external nofollow noopener noreferrer" target="_blank">tensorflowkorea.gitbooks.io/tensorflow-kr/content/g3doc/get_started/os_setup.html</a></cite></footer></blockquote>
<p>혹시 설치방법에 문제가 생긴 경우에는 댓글로 문의를 주세요!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;텐서플로우란-무엇일까&quot;&gt;&lt;a href=&quot;#텐서플로우란-무엇일까&quot; class=&quot;headerlink&quot; title=&quot;텐서플로우란 무엇일까&quot;&gt;&lt;/a&gt;텐서플로우란 무엇일까&lt;/h1&gt;&lt;p&gt;요새 굉장히 핫하죠! 머신러닝, 딥러닝!&lt;br&gt;(머신러닝과 딥
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>텐서플로우 무료강의 소개</title>
    <link href="https://penglover.github.io/2017/01/14/tensorflow-lecture-korean/"/>
    <id>https://penglover.github.io/2017/01/14/tensorflow-lecture-korean/</id>
    <published>2017-01-14T08:24:28.000Z</published>
    <updated>2017-01-15T00:11:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>머신러닝에서 가장 핫한 라이브러리중 하나죠! tensorflow!<br>그런데 아직 한글로 된 강의가 많이 없는 것이 현실입니다.<br><strong>홍콩 과학기술대학교의 김성훈 교수님이 tensorflow를 무료로 강의해주십니다.</strong><br>대상은 비전공자나 전공자 중에서 머신러닝 입문자들입니다. ㅎㅎ<br>정말 기초부터 차근차근 잘 알려주십니다.<br><a href="https://hunkim.github.io/ml/" rel="external nofollow noopener noreferrer" target="_blank">https://hunkim.github.io/ml/</a><br>다음의 링크를 타고 가시면 강의를 볼 수 있습니다~^^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;머신러닝에서 가장 핫한 라이브러리중 하나죠! tensorflow!&lt;br&gt;그런데 아직 한글로 된 강의가 많이 없는 것이 현실입니다.&lt;br&gt;&lt;strong&gt;홍콩 과학기술대학교의 김성훈 교수님이 tensorflow를 무료로 강의해주십니다.&lt;/strong
    
    </summary>
    
      <category term="ML" scheme="https://penglover.github.io/categories/ML/"/>
    
      <category term="TensorFlow" scheme="https://penglover.github.io/categories/ML/TensorFlow/"/>
    
    
      <category term="machinelearning" scheme="https://penglover.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>first posting on hexo!</title>
    <link href="https://penglover.github.io/2017/01/13/first-posting-on-hexo/"/>
    <id>https://penglover.github.io/2017/01/13/first-posting-on-hexo/</id>
    <published>2017-01-13T07:26:12.000Z</published>
    <updated>2017-01-15T00:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>첫 게시글입니다. 잘부탁드립니다~ hexo 짱짱맨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫 게시글입니다. 잘부탁드립니다~ hexo 짱짱맨&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
