{"meta":{"title":"Wellcome to IT Blog","subtitle":"Penglover's Software house","description":"Talk about software","author":"Myeongsoo Kim","url":"https://penglover.github.io"},"pages":[],"posts":[{"title":"텐서플로우로 linear regression 구현 및 설명","slug":"tf-LinearRegression","date":"2017-01-14T14:50:53.000Z","updated":"2017-01-15T00:11:13.000Z","comments":true,"path":"2017/01/14/tf-LinearRegression/","link":"","permalink":"https://penglover.github.io/2017/01/14/tf-LinearRegression/","excerpt":"","text":"Linear RegressionLinear Regression에 대한 지식이 없으시다면 아래의 동영상을 보시는 것을 추천합니다.https://www.youtube.com/watch?v=GmtqOlPYB84이미 알고 계신다면 렛츠고!아! 참고로 tensorflow 버전이나 python버전이 다르다면tf.global_variables_initializer, print, range 부분에 수정이 필요합니다.오류나면 댓글남겨주세요 ㅎㅎ 바로 알려드릴게요. LinearRegression.py12345678910111213141516171819202122232425262728293031import tensorflow as tfx_data = [1, 2, 3, 4]y_data = [2, 4, 6, 8]W = tf.Variable(tf.random_uniform([1], -10000, 10000))b = tf.Variable(tf.random_uniform([1], -10000, 10000))X = tf.placeholder(tf.float32)Y = tf.placeholder(tf.float32)hypothesis = W * X + bcost = tf.reduce_mean(tf.square(hypothesis - Y))a = tf.Variable(0.1)optimizer = tf.train.GradientDescentOptimizer(a)train = optimizer.minimize(cost)init = tf.global_variables_initializer()sess = tf.Session()sess.run(init)for step in range(2001): sess.run(train, feed_dict=&#123;X: x_data, Y: y_data&#125;) if step % 200 == 0: print (step, sess.run(cost, feed_dict=&#123;X: x_data, Y: y_data&#125;), sess.run(W), sess.run(b))print (sess.run(hypothesis, feed_dict=&#123;X: [5, 10]&#125;))print (sess.run(hypothesis, feed_dict=&#123;X: [2.5, 1.5]&#125;)) 결과값0 1.17541e+07 [-3064.45288086] [ 7678.85205078]200 53.5173 [-4.08845949] [ 17.90081406]400 0.000280612 [ 1.98605835] [ 0.04099015]600 1.46635e-09 [ 1.99996805] [ 9.38054509e-05]800 1.42109e-14 [ 1.99999988] [ 4.28800519e-07]1000 0.0 [ 2.] [ 1.18856534e-07]1200 0.0 [ 2.] [ 1.18856534e-07]1400 0.0 [ 2.] [ 1.18856534e-07]1600 0.0 [ 2.] [ 1.18856534e-07]1800 0.0 [ 2.] [ 1.18856534e-07]2000 0.0 [ 2.] [ 1.18856534e-07][ 10. 20.][ 5. 3.] 아주 쉽게 이해가 가실 것입니다.W와 b를 -10000에서 10000사이의 랜덤한 값으로 두었습니다.X와 Y는 32bit의 float형 데이터로 선언해 두었지요.hypothesis는 input값이 될 X에게 w와 b를 더해서 나오는 결과에 대한 기대값입니다.cost는 기대값과 실제값을 뺀것을 제곱을 한 것의 평균값을 갖게 될 것입니다.reduce_mean은 참고로 평균값을 내게 해주는 매소드입니다.(m개의 input이 있으면 그것들의 평균값을 매겨줌)a는 learning rate입니다.tf.train.GradientDescentOptimizer가 gradient descent 알고리즘을 처리해줍니다.그리고 minimize가 cost를 인자로 받아서 train될때마다 W와 b를 업데이트합니다.화면이 너무 꽉 찰 것 같아서 step은 200개당 1번 print 했습니다.결과값을 보니 training이 아주 잘 되었네요! 헷갈리는 tensorflow의 링크가 있다면 아래에 모든 것이 나와있습니다.https://www.tensorflow.org/versions/master/api_docs/python/math_ops/reduction#reduce_mean","categories":[{"name":"ML","slug":"ML","permalink":"https://penglover.github.io/categories/ML/"},{"name":"TensorFlow","slug":"ML/TensorFlow","permalink":"https://penglover.github.io/categories/ML/TensorFlow/"}],"tags":[{"name":"machinelearning","slug":"machinelearning","permalink":"https://penglover.github.io/tags/machinelearning/"}]},{"title":"텐서플로우에서 placeholder란 무엇일까?","slug":"tf-placeholder","date":"2017-01-14T13:01:16.000Z","updated":"2017-01-15T00:11:14.000Z","comments":true,"path":"2017/01/14/tf-placeholder/","link":"","permalink":"https://penglover.github.io/2017/01/14/tf-placeholder/","excerpt":"","text":"텐서플로우에서 참 재밌는 메서드가 있습니다.바로 placeholder 인데요!우리는 이것을 통해 값의 대입을 미룰 수 있습니다.아래의 코드에서 자세히 확인해보겠습니다.아! 참고로 python버전이 다르다면print부분에 수정이 필요합니다. placeholder.py12345678910111213import tensorflow as tfsess = tf.Session()a = tf.placeholder(tf.int16)b = tf.placeholder(tf.int16)add = tf.add(a, b)mul = tf.mul(a, b)print(&quot;더한 결과는 %i&quot; % sess.run(add,feed_dict=&#123;a: 2, b: 3&#125;))print(&quot;곱한 결과는 %i&quot; % sess.run(mul,feed_dict=&#123;a: 3, b: 4&#125;)) 결과값더한 결과는 5곱한 결과는 12 placeholder를 통해 먼저 16bit 크기의 int형 데이터의 공간을 만들어 놓았습니다.그리고 나중에 연산을 할 때에 대입값을 지정해 주었지요.나중에 아주 유용하게 많이 쓰이니 꼭 잘 숙지하고 넘어가야 하는 부분입니다.","categories":[{"name":"ML","slug":"ML","permalink":"https://penglover.github.io/categories/ML/"},{"name":"TensorFlow","slug":"ML/TensorFlow","permalink":"https://penglover.github.io/categories/ML/TensorFlow/"}],"tags":[{"name":"machinelearning","slug":"machinelearning","permalink":"https://penglover.github.io/tags/machinelearning/"}]},{"title":"텐서플로우에서 상수란 존재하지 않는다? 모든것은 연산!","slug":"tensorflow1","date":"2017-01-14T12:33:46.000Z","updated":"2017-01-14T15:14:09.000Z","comments":true,"path":"2017/01/14/tensorflow1/","link":"","permalink":"https://penglover.github.io/2017/01/14/tensorflow1/","excerpt":"","text":"텐서플로우에서 상수란 존재하지 않는다NoConstant.py12345678910111213141516import tensorflow as tfsess = tf.Session()a = tf.constant(1)b = tf.constant(2)c = a+bprint(a)print(b)print(c)print(sess.run(a))print(sess.run(b))print(sess.run(c)) 결과값Tensor(“Const:0”, shape=(), dtype=int32)Tensor(“Const_1:0”, shape=(), dtype=int32)Tensor(“add:0”, shape=(), dtype=int32)123 위에 보이듯이 모든 텐서플로우에서의 변수는 상수상태로 존재하지 않습니다.operation 상태로 존재하고 session에 run메소드를 주는 순간 연산이 이루어지지요.이로서 우리는 각 노드들을 병렬적으로 다룰 수 있게 되지요.한마디로 각 노드들은 tensor들(데이터 배열들)을 나르는 역할을 할 뿐이기 때문에 모든 node는 operation이라고 하는 것이지요.아래의 애니메이션을 보면 더 정확히 아실 수 있으실거에요!","categories":[{"name":"ML","slug":"ML","permalink":"https://penglover.github.io/categories/ML/"},{"name":"TensorFlow","slug":"ML/TensorFlow","permalink":"https://penglover.github.io/categories/ML/TensorFlow/"}],"tags":[{"name":"machinelearning","slug":"machinelearning","permalink":"https://penglover.github.io/tags/machinelearning/"}]},{"title":"텐서플로우란 무엇일까? 추천 설치방법","slug":"What-is-tensorflow-How-to-install","date":"2017-01-14T10:21:32.000Z","updated":"2017-01-14T12:05:04.000Z","comments":true,"path":"2017/01/14/What-is-tensorflow-How-to-install/","link":"","permalink":"https://penglover.github.io/2017/01/14/What-is-tensorflow-How-to-install/","excerpt":"","text":"텐서플로우란 무엇일까요새 굉장히 핫하죠! 머신러닝, 딥러닝!(머신러닝과 딥러닝에 대한 설명은 다음에 포스팅을 따로 하겠습니다)텐서플로우는 구글에서 발표한 머신러닝 오픈소스 라이브러리로 내부는 C++로 되어있고 여러 언어의 API를 제공합니다.가장 문서화가 잘 되어있고 인기있는 API는 파이썬입니다.때문에 주로 사람들이 파이썬으로 개발을 하는데요!그렇다면 왜 텐서플로우가 핫할까요?그것은 바로 텐서플로우를 이용하면 짧은 시간에 강력한 머신러닝, 딥러닝 코드를 짤 수 있기 때문입니다.테스트할 때에 쓰기도 좋고 상용 시스템을 만들 때에도 좋은 라이브러리입니다. 텐서플로우는 왜 빠를까텐서플로우가 빠른데에는 이유가 있습니다.위의 그림에서 보시다시피 각각의 node들이 연산을 병렬적으로 처리합니다.내부코드가 C++라서 빠른데다가 병렬성이 좋아서 여기저기 잘 붙습니다.즉 굉장히 유연하게 cpu, gpu 등의 환경에서 빠르게 처리될 수 있습니다. 텐서플로우 설치방법아래의 링크에 설치 방법이 자세히 나와있습니다. 가장 추천하는 방법은 Virtualenv 설치입니다. 이유는 가상환경을 이용함으로써 파이썬의 버전을 독립적으로 지켜주기 때문입니다. @텐서플로우설치tensorflowkorea.gitbooks.io/tensorflow-kr/content/g3doc/get_started/os_setup.html 혹시 설치방법에 문제가 생긴 경우에는 댓글로 문의를 주세요!","categories":[{"name":"ML","slug":"ML","permalink":"https://penglover.github.io/categories/ML/"},{"name":"TensorFlow","slug":"ML/TensorFlow","permalink":"https://penglover.github.io/categories/ML/TensorFlow/"}],"tags":[{"name":"machinelearning","slug":"machinelearning","permalink":"https://penglover.github.io/tags/machinelearning/"}]},{"title":"텐서플로우 무료강의 소개","slug":"tensorflow-lecture-korean","date":"2017-01-14T08:24:28.000Z","updated":"2017-01-14T11:52:07.000Z","comments":true,"path":"2017/01/14/tensorflow-lecture-korean/","link":"","permalink":"https://penglover.github.io/2017/01/14/tensorflow-lecture-korean/","excerpt":"","text":"머신러닝에서 가장 핫한 라이브러리중 하나죠! tensorflow!그런데 아직 한글로 된 강의가 많이 없는 것이 현실입니다.홍콩 과학기술대학교의 김성훈 교수님이 tensorflow를 무료로 강의해주십니다.대상은 비전공자나 전공자 중에서 머신러닝 입문자들입니다. ㅎㅎ정말 기초부터 차근차근 잘 알려주십니다.https://hunkim.github.io/ml/다음의 링크를 타고 가시면 강의를 볼 수 있습니다~^^","categories":[{"name":"ML","slug":"ML","permalink":"https://penglover.github.io/categories/ML/"},{"name":"TensorFlow","slug":"ML/TensorFlow","permalink":"https://penglover.github.io/categories/ML/TensorFlow/"}],"tags":[{"name":"machinelearning","slug":"machinelearning","permalink":"https://penglover.github.io/tags/machinelearning/"}]},{"title":"first posting on hexo!","slug":"first-posting-on-hexo","date":"2017-01-13T07:26:12.000Z","updated":"2017-01-15T00:11:09.000Z","comments":true,"path":"2017/01/13/first-posting-on-hexo/","link":"","permalink":"https://penglover.github.io/2017/01/13/first-posting-on-hexo/","excerpt":"","text":"첫 게시글입니다. 잘부탁드립니다~ hexo 짱짱맨","categories":[],"tags":[]}]}